name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20.11.1'
  PNPM_VERSION: '8.15.4'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        run: |
          missing_secrets=()
          required_secrets=(
            "PROD_CLOUDFLARE_API_TOKEN"
            "PROD_API_URL"
            "PROD_CLOUDFLARE_ZONE_ID"
            "PROD_CLOUDFLARE_ACCOUNT_ID"
            "PROD_MONGODB_URI"
            "PROD_JWT_SECRET"
            "PROD_R2_ACCOUNT_ID"
            "PROD_R2_ACCESS_KEY_ID"
            "PROD_R2_SECRET_ACCESS_KEY"
            "PROD_HUGGINGFACE_API_KEY"
          )

          for secret_name in "${required_secrets[@]}"; do
            if [[ -z "${!secret_name}" ]]; then
              missing_secrets+=("$secret_name")
            fi
          done

          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi
        env:
          PROD_CLOUDFLARE_API_TOKEN: ${{ secrets.PROD_CLOUDFLARE_API_TOKEN }}
          PROD_API_URL: ${{ secrets.PROD_API_URL }}
          PROD_CLOUDFLARE_ZONE_ID: ${{ secrets.PROD_CLOUDFLARE_ZONE_ID }}
          PROD_CLOUDFLARE_ACCOUNT_ID: ${{ secrets.PROD_CLOUDFLARE_ACCOUNT_ID }}
          PROD_MONGODB_URI: ${{ secrets.PROD_MONGODB_URI }}
          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          PROD_R2_ACCOUNT_ID: ${{ secrets.PROD_R2_ACCOUNT_ID }}
          PROD_R2_ACCESS_KEY_ID: ${{ secrets.PROD_R2_ACCESS_KEY_ID }}
          PROD_R2_SECRET_ACCESS_KEY: ${{ secrets.PROD_R2_SECRET_ACCESS_KEY }}
          PROD_HUGGINGFACE_API_KEY: ${{ secrets.PROD_HUGGINGFACE_API_KEY }}

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: |
          pnpm build:backend
          pnpm build:frontend
        env:
          JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          MONGODB_URI: ${{ secrets.PROD_MONGODB_URI }}
          API_URL: ${{ secrets.PROD_API_URL }}
          R2_ACCOUNT_ID: ${{ secrets.PROD_R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.PROD_R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.PROD_R2_SECRET_ACCESS_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.PROD_HUGGINGFACE_API_KEY }}

      - name: Deploy to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.PROD_CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.PROD_CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: dist
          environment: production 