version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/expense
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - GMAIL_CLIENT_ID_1=${GMAIL_CLIENT_ID_1}
      - GMAIL_CLIENT_SECRET_1=${GMAIL_CLIENT_SECRET_1}
      - GMAIL_REFRESH_TOKEN_1=${GMAIL_REFRESH_TOKEN_1}
      - GMAIL_CLIENT_ID_2=${GMAIL_CLIENT_ID_2}
      - GMAIL_CLIENT_SECRET_2=${GMAIL_CLIENT_SECRET_2}
      - GMAIL_REFRESH_TOKEN_2=${GMAIL_REFRESH_TOKEN_2}
      - GMAIL_CLIENT_ID_3=${GMAIL_CLIENT_ID_3}
      - GMAIL_CLIENT_SECRET_3=${GMAIL_CLIENT_SECRET_3}
      - GMAIL_REFRESH_TOKEN_3=${GMAIL_REFRESH_TOKEN_3}
      - GMAIL_CLIENT_ID_4=${GMAIL_CLIENT_ID_4}
      - GMAIL_CLIENT_SECRET_4=${GMAIL_CLIENT_SECRET_4}
      - GMAIL_REFRESH_TOKEN_4=${GMAIL_REFRESH_TOKEN_4}
      - GMAIL_CLIENT_ID_5=${GMAIL_CLIENT_ID_5}
      - GMAIL_CLIENT_SECRET_5=${GMAIL_CLIENT_SECRET_5}
      - GMAIL_REFRESH_TOKEN_5=${GMAIL_REFRESH_TOKEN_5}
      - PROD_HUGGINGFACE_API_KEY=${PROD_HUGGINGFACE_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - R2_ACCESS_KEY_ID=development-key
      - R2_SECRET_ACCESS_KEY=development-secret
      - R2_BUCKET=expense-files
      - R2_ENDPOINT=http://minio:9000
    volumes:
      - .:/app
      - /app/node_modules
    command: pnpm start:dev backend
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    networks:
      - app-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - NEXT_PUBLIC_STORAGE_URL=http://minio:9000
    ports:
      - '80:80'
    networks:
      - app-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # MongoDB
  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    ports:
      - '27017:27017'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - '3001:3000'
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - app-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9100/metrics']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - '8080:8080'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - '9093:9093'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9093/-/healthy']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
